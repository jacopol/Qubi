Extensions Input:
- allow gates xor, ite  (easy)
- allow non-prefix qcir (semantics?)
- allow free variables  (doable)

Preprocessing:
- remove (or skip) unused vars / gates (already detected)
- early quantification (non-prenex)
- transform back to prenex

Solving:
- use pairwise disjunction/conjunction
- use parallel disjunction/conjunction

Improvements:
- use options with =, as in -t=27 -w=4
- option for setting tablesize, workers
- statistics: timing
- statistics: print peak BDD

Refactor:
- refactor: Reading and Writing as subclass of Circuit
- refactor: Solver could be an abstract class / interface
- refactor: Make general BDD interface, where Sylvan is one implementation

Suggestions for Sylvan:
- simplify initialisation (at least for non-lace use)
- vector<bool> PickOneCube(vector<uint32_t>variables) 
- map<int,bool> PickOneCube(BDDset variables)
- resolve Bdd vs Cube vs BddSet
- vector<bool> vs vector<uint_8>
- bool 0,1 versus enum {0,1,2} (don't care values)
